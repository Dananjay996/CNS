#include <stdio.h>
#include <ctype.h>
#include <string.h>

void encrypt(char *text, int shift) {
    char ch;
    for (int i = 0; text[i] != '\0'; ++i) {
        ch = text[i];

        // Encrypt uppercase letters
        if (isupper(ch)) {
            text[i] = (ch + shift - 'A') % 26 + 'A';
        }
        // Encrypt lowercase letters
        else if (islower(ch)) {
            text[i] = (ch + shift - 'a') % 26 + 'a';
        }
    }
}

void decrypt(char *text, int shift) {
    encrypt(text, 26 - shift);
}

int main() {
    char text[100];
    int shift;

    printf("Enter a message to encrypt: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0; // Remove newline character

    printf("Enter shift amount: ");
    scanf("%d", &shift);

    encrypt(text, shift);
    printf("Encrypted message: %s\n", text);

    decrypt(text, shift);
    printf("Decrypted message: %s\n", text);

    return 0;
}
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generateKeyTable(const char* key, char keyTable[SIZE][SIZE]) {
    int letterExists[26] = {0}; // Track letters already added to the table
    int index = 0;
    int row = 0, col = 0;

    // Add key letters to the table
    for (int i = 0; key[i] != '\0'; i++) {
        char ch = toupper(key[i]);

        if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'

        if (!letterExists[ch - 'A']) {
            keyTable[row][col] = ch;
            letterExists[ch - 'A'] = 1;

            col++;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }

    // Add remaining letters to the table
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue; // Skip 'J'

        if (!letterExists[ch - 'A']) {
            keyTable[row][col] = ch;
            letterExists[ch - 'A'] = 1;

            col++;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
}

void printKeyTable(char keyTable[SIZE][SIZE]) {
    printf("Playfair Key Table:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", keyTable[i][j]);
        }
        printf("\n");
    }
}

void findPosition(char keyTable[SIZE][SIZE], char ch, int* row, int* col) {
    if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyTable[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void prepareText(const char* input, char* prepared) {
    int len = strlen(input);
    int index = 0;

    for (int i = 0; i < len; i++) {
        char ch = toupper(input[i]);

        if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'

        if (isalpha(ch)) {
            if (index > 0 && prepared[index - 1] == ch) {
                prepared[index++] = 'X'; // Insert 'X' between duplicate letters
            }
            prepared[index++] = ch;
        }
    }

    if (index % 2 != 0) {
        prepared[index++] = 'X'; // Add 'X' if length is odd
    }

    prepared[index] = '\0';
}

void encryptDigraph(const char digraph[2], char* result, char keyTable[SIZE][SIZE]) {
    int row1, col1, row2, col2;
    findPosition(keyTable, digraph[0], &row1, &col1);
    findPosition(keyTable, digraph[1], &row2, &col2);

    if (row1 == row2) {
        // Same row, shift right
        result[0] = keyTable[row1][(col1 + 1) % SIZE];
        result[1] = keyTable[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        // Same column, shift down
        result[0] = keyTable[(row1 + 1) % SIZE][col1];
        result[1] = keyTable[(row2 + 1) % SIZE][col2];
    } else {
        // Rectangle case
        result[0] = keyTable[row1][col2];
        result[1] = keyTable[row2][col1];
    }
}

void decryptDigraph(const char digraph[2], char* result, char keyTable[SIZE][SIZE]) {
    int row1, col1, row2, col2;
    findPosition(keyTable, digraph[0], &row1, &col1);
    findPosition(keyTable, digraph[1], &row2, &col2);

    if (row1 == row2) {
        // Same row, shift left
        result[0] = keyTable[row1][(col1 + SIZE - 1) % SIZE];
        result[1] = keyTable[row2][(col2 + SIZE - 1) % SIZE];
    } else if (col1 == col2) {
        // Same column, shift up
        result[0] = keyTable[(row1 + SIZE - 1) % SIZE][col1];
        result[1] = keyTable[(row2 + SIZE - 1) % SIZE][col2];
    } else {
        // Rectangle case
        result[0] = keyTable[row1][col2];
        result[1] = keyTable[row2][col1];
    }
}

void playfairEncrypt(const char* plaintext, char* ciphertext, char keyTable[SIZE][SIZE]) {
    char prepared[200];
    prepareText(plaintext, prepared);
    printf("Prepared Text: %s\n", prepared);

    int len = strlen(prepared);
    for (int i = 0; i < len; i += 2) {
        encryptDigraph(&prepared[i], &ciphertext[i], keyTable);
    }
    ciphertext[len] = '\0';
}

void playfairDecrypt(const char* ciphertext, char* plaintext, char keyTable[SIZE][SIZE]) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i += 2) {
        decryptDigraph(&ciphertext[i], &plaintext[i], keyTable);
    }
    plaintext[len] = '\0';
}

int main() {
    char key[100], plaintext[200], ciphertext[200], decrypted[200];
    char keyTable[SIZE][SIZE];

    printf("Enter the keyword: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = 0; // Remove newline character

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove newline character

    generateKeyTable(key, keyTable);
    printKeyTable(keyTable);

    playfairEncrypt(plaintext, ciphertext, keyTable);
    printf("Ciphertext: %s\n", ciphertext);

    playfairDecrypt(ciphertext, decrypted, keyTable);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
import java.util.ArrayList;  
import java.util.Scanner;  
public class HillCipher{  
    //method to accept key matrix  
    private static int[][] getKeyMatrix() {  
        Scanner sc = new Scanner(System.in);  
        System.out.println("Enter key matrix:");  
        String key = sc.nextLine();  
        //int len = key.length();  
        double sq = Math.sqrt(key.length());  
        if (sq != (long) sq) {  
            System.out.println("Cannot Form a square matrix");  
        }  
        int len = (int) sq;  
        int[][] keyMatrix = new int[len][len];  
        int k = 0;  
        for (int i = 0; i < len; i++)  
        {  
            for (int j = 0; j < len; j++)  
            {  
                keyMatrix[i][j] = ((int) key.charAt(k)) - 97;  
                k++;  
            }  
        }  
        return keyMatrix;  
    }  
    // Below method checks whether the key matrix is valid (det=0)  
    private static void isValidMatrix(int[][] keyMatrix) {  
        int det = keyMatrix[0][0] * keyMatrix[1][1] - keyMatrix[0][1] * keyMatrix[1][0];  
        // If det=0, throw exception and terminate  
        if(det == 0) {  
            throw new java.lang.Error("Det equals to zero, invalid key matrix!");  
        }  
    }  
    // This method checks if the reverse key matrix is valid (matrix mod26 = (1,0,0,1)  
        private static void isValidReverseMatrix(int[][] keyMatrix, int[][] reverseMatrix) {  
        int[][] product = new int[2][2];  
        // Find the product matrix of key matrix times reverse key matrix  
        product[0][0] = (keyMatrix[0][0]*reverseMatrix[0][0] + keyMatrix[0][1] * reverseMatrix[1][0]) % 26;  
        product[0][1] = (keyMatrix[0][0]*reverseMatrix[0][1] + keyMatrix[0][1] * reverseMatrix[1][1]) % 26;  
        product[1][0] = (keyMatrix[1][0]*reverseMatrix[0][0] + keyMatrix[1][1] * reverseMatrix[1][0]) % 26;  
        product[1][1] = (keyMatrix[1][0]*reverseMatrix[0][1] + keyMatrix[1][1] * reverseMatrix[1][1]) % 26;  
        // Check if a=1 and b=0 and c=0 and d=1  
        // If not, throw exception and terminate  
        if(product[0][0] != 1 || product[0][1] != 0 || product[1][0] != 0 || product[1][1] != 1) {  
            throw new java.lang.Error("Invalid reverse matrix found!");  
        }  
    }  
    // This method calculates the reverse key matrix  
    private static int[][] reverseMatrix(int[][] keyMatrix) {  
        int detmod26 = (keyMatrix[0][0] * keyMatrix[1][1] - keyMatrix[0][1] * keyMatrix[1][0]) % 26; // Calc det  
        int factor;  
        int[][] reverseMatrix = new int[2][2];  
        // Find the factor for which is true that  
        // factor*det = 1 mod 26  
        for(factor=1; factor < 26; factor++)  
        {  
            if((detmod26 * factor) % 26 == 1)  
            {  
                break;  
            }  
        }  
        // Calculate the reverse key matrix elements using the factor found  
        reverseMatrix[0][0] = keyMatrix[1][1]           * factor % 26;  
        reverseMatrix[0][1] = (26 - keyMatrix[0][1])    * factor % 26;  
        reverseMatrix[1][0] = (26 - keyMatrix[1][0])    * factor % 26;  
        reverseMatrix[1][1] = keyMatrix[0][0]           * factor % 26;  
        return reverseMatrix;  
    }  
    // This method echoes the result of encrypt/decrypt  
    private static void echoResult(String label, int adder, ArrayList<Integer> phrase) {  
        int i;  
        System.out.print(label);  
        // Loop for each pair  
        for(i=0; i < phrase.size(); i += 2) {  
            System.out.print(Character.toChars(phrase.get(i) + (64 + adder)));  
            System.out.print(Character.toChars(phrase.get(i+1) + (64 + adder)));  
            if(i+2 <phrase.size()) {  
                System.out.print("-");  
            }  
        }  
        System.out.println();  
    }  
    // This method makes the actual encryption   
    public static void encrypt(String phrase, boolean alphaZero)  
    {  
        int i;  
        int adder = alphaZero ? 1 : 0; // For calclulations depending on the alphabet  
        int[][] keyMatrix;  
        ArrayList<Integer> phraseToNum = new ArrayList<>();  
        ArrayList<Integer> phraseEncoded = new ArrayList<>();  
        // Delete all non-english characters, and convert phrase to upper case  
        phrase = phrase.replaceAll("[^a-zA-Z]","").toUpperCase();  
  
        // If phrase length is not an even number, add "Q" to make it even  
        if(phrase.length() % 2 == 1) {  
            phrase += "Q";  
        }  
        // Get the 2x2 key matrix from sc  
        keyMatrix = getKeyMatrix();  
        // Check if the matrix is valid (det != 0)  
        isValidMatrix(keyMatrix);  
        // Convert characters to numbers according to their  
        // place in ASCII table minus 64 positions (A=65 in ASCII table)  
        // If we use A=0 alphabet, subtract one more (adder)  
        for(i=0; i < phrase.length(); i++) {  
            phraseToNum.add(phrase.charAt(i) - (64 + adder));  
        }  
        // Find the product per pair of the phrase with the key matrix modulo 26  
        // If we use A=1 alphabet and result is 0, replace it with 26 (Z)  
        for(i=0; i < phraseToNum.size(); i += 2) {  
            int x = (keyMatrix[0][0] * phraseToNum.get(i) + keyMatrix[0][1] * phraseToNum.get(i+1)) % 26;  
            int y = (keyMatrix[1][0] * phraseToNum.get(i) + keyMatrix[1][1] * phraseToNum.get(i+1)) % 26;  
            phraseEncoded.add(alphaZero ? x : (x == 0 ? 26 : x ));  
            phraseEncoded.add(alphaZero ? y : (y == 0 ? 26 : y ));  
        }  
        // Print the result  
        echoResult("Encoded phrase: ", adder, phraseEncoded);  
    }  
    // This method makes the actual decryption  
    public static void decrypt(String phrase, boolean alphaZero)  
    {  
        int i, adder = alphaZero ? 1 : 0;  
        int[][] keyMatrix, revKeyMatrix;  
        ArrayList<Integer> phraseToNum = new ArrayList<>();  
        ArrayList<Integer> phraseDecoded = new ArrayList<>();  
        // Delete all non-english characters, and convert phrase to upper case  
        phrase = phrase.replaceAll("[^a-zA-Z]","").toUpperCase();  
  
        // Get the 2x2 key matrix from sc  
        keyMatrix = getKeyMatrix();  
        // Check if the matrix is valid (det != 0)  
        isValidMatrix(keyMatrix);  
        // Convert numbers to characters according to their  
        // place in ASCII table minus 64 positions (A=65 in ASCII table)  
        // If we use A=0 alphabet, subtract one more (adder)  
        for(i=0; i < phrase.length(); i++) {  
            phraseToNum.add(phrase.charAt(i) - (64 + adder));  
        }  
        // Find the reverse key matrix  
        revKeyMatrix = reverseMatrix(keyMatrix);  
        // Check if the reverse key matrix is valid (product = 1,0,0,1)  
        isValidReverseMatrix(keyMatrix, revKeyMatrix);  
        // Find the product per pair of the phrase with the reverse key matrix modulo 26  
        for(i=0; i < phraseToNum.size(); i += 2) {  
            phraseDecoded.add((revKeyMatrix[0][0] * phraseToNum.get(i) + revKeyMatrix[0][1] * phraseToNum.get(i+1)) % 26);  
            phraseDecoded.add((revKeyMatrix[1][0] * phraseToNum.get(i) + revKeyMatrix[1][1] * phraseToNum.get(i+1)) % 26);  
        }  
        // Print the result  
        echoResult("Decoded phrase: ", adder, phraseDecoded);  
    }  
    //main method  
    public static void main(String[] args) {  
        String opt, phrase;  
        byte[] p;  
        Scanner sc = new Scanner(System.in);  
        System.out.println("Hill Cipher Implementation (2x2)");  
        System.out.println("-------------------------");  
        System.out.println("1. Encrypt text (A=0,B=1,...Z=25)");  
        System.out.println("2. Decrypt text (A=0,B=1,...Z=25)");  
        System.out.println("3. Encrypt text (A=1,B=2,...Z=26)");  
        System.out.println("4. Decrypt text (A=1,B=2,...Z=26)");  
        System.out.println();  
        System.out.println("Type any other character to exit");  
        System.out.println();  
        System.out.print("Select your choice: ");  
        opt = sc.nextLine();  
        switch (opt)  
        {  
            case "1":  
                System.out.print("Enter phrase to encrypt: ");  
                phrase = sc.nextLine();  
                encrypt(phrase, true);  
                System.out.print("Decrypted text is : " + phrase);
                break;  
            case "2":  
                System.out.print("Enter phrase to decrypt: ");  
                phrase = sc.nextLine();  
                decrypt(phrase, true);  
                break;  
            case "3":  
                System.out.print("Enter phrase to encrypt: ");  
                phrase = sc.nextLine();  
                encrypt(phrase, false);  
                break;  
            case "4":  
                System.out.print("Enter phrase to decrypt: ");  
                phrase = sc.nextLine();  
                decrypt(phrase, false);  
                break;  
        }  
    }  
}
// C++ program to illustrate Rail Fence Cipher
// Encryption and Decryption
#include <bits/stdc++.h>
using namespace std;

// function to encrypt a message
string encryptRailFence(string text, int key)
{
	// create the matrix to cipher plain text
	// key = rows , length(text) = columns
	char rail[key][(text.length())];

	// filling the rail matrix to distinguish filled
	// spaces from blank ones
	for (int i=0; i < key; i++)
		for (int j = 0; j < text.length(); j++)
			rail[i][j] = '\n';

	// to find the direction
	bool dir_down = false;
	int row = 0, col = 0;

	for (int i=0; i < text.length(); i++)
	{
		// check the direction of flow
		// reverse the direction if we've just
		// filled the top or bottom rail
		if (row == 0 || row == key-1)
			dir_down = !dir_down;

		// fill the corresponding alphabet
		rail[row][col++] = text[i];

		// find the next row using direction flag
		dir_down?row++ : row--;
	}

	//now we can construct the cipher using the rail matrix
	string result;
	for (int i=0; i < key; i++)
		for (int j=0; j < text.length(); j++)
			if (rail[i][j]!='\n')
				result.push_back(rail[i][j]);

	return result;
}

// This function receives cipher-text and key
// and returns the original text after decryption
string decryptRailFence(string cipher, int key)
{
	// create the matrix to cipher plain text
	// key = rows , length(text) = columns
	char rail[key][cipher.length()];

	// filling the rail matrix to distinguish filled
	// spaces from blank ones
	for (int i=0; i < key; i++)
		for (int j=0; j < cipher.length(); j++)
			rail[i][j] = '\n';

	// to find the direction
	bool dir_down;

	int row = 0, col = 0;

	// mark the places with '*'
	for (int i=0; i < cipher.length(); i++)
	{
		// check the direction of flow
		if (row == 0)
			dir_down = true;
		if (row == key-1)
			dir_down = false;

		// place the marker
		rail[row][col++] = '*';

		// find the next row using direction flag
		dir_down?row++ : row--;
	}

	// now we can construct the fill the rail matrix
	int index = 0;
	for (int i=0; i<key; i++)
		for (int j=0; j<cipher.length(); j++)
			if (rail[i][j] == '*' && index<cipher.length())
				rail[i][j] = cipher[index++];


	// now read the matrix in zig-zag manner to construct
	// the resultant text
	string result;

	row = 0, col = 0;
	for (int i=0; i< cipher.length(); i++)
	{
		// check the direction of flow
		if (row == 0)
			dir_down = true;
		if (row == key-1)
			dir_down = false;

		// place the marker
		if (rail[row][col] != '*')
			result.push_back(rail[row][col++]);

		// find the next row using direction flag
		dir_down?row++: row--;
	}
	return result;
}

//driver program to check the above functions
int main()
{
  string code;
  cin >> code;
  int key; 
  cin >> key;
  string cipher = encryptRailFence(code,key);
  cout << "Cipher is: " << cipher << endl;
  cout << "Decrypted message is: " << decryptRailFence(cipher,key);
	return 0;
}
// C++ code to implement Vigenere Cipher
#include <bits/stdc++.h>
using namespace std;

// This function generates the key in
// a cyclic manner until it's length isn't
// equal to the length of original text
string generateKey(string str, string key)
{
    int x = str.size();

    for (int i = 0;; i++) {
        if (x == i)
            i = 0;
        if (key.size() == str.size())
            break;
        key.push_back(key[i]);
    }
    return key;
}

// This function returns the encrypted text
// generated with the help of the key
string cipherText(string str, string key)
{
    string cipher_text;

    for (int i = 0; i < str.size(); i++) {
        // converting in range 0-25
        char x = (str[i] + key[i]) % 26;

        // convert into alphabets(ASCII)
        x += 'A';

        cipher_text.push_back(x);
    }
    return cipher_text;
}

// This function decrypts the encrypted text
// and returns the original text
string originalText(string cipher_text, string key)
{
    string orig_text;

    for (int i = 0; i < cipher_text.size(); i++) {
        // converting in range 0-25
        char x = (cipher_text[i] - key[i] + 26) % 26;

        // convert into alphabets(ASCII)
        x += 'A';
        orig_text.push_back(x);
    }
    return orig_text;
}

// Driver program to test the above function
int main()
{
    string str,keyword;
    cin >> str >> keyword;
    if (any_of(str.begin(), str.end(), ::islower))
        transform(str.begin(), str.end(), str.begin(),
                  ::toupper);
    if (any_of(keyword.begin(), keyword.end(), ::islower))
        transform(keyword.begin(), keyword.end(),
                  keyword.begin(), ::toupper);

    string key = generateKey(str, keyword);
    string cipher_text = cipherText(str, key);

    cout << "Ciphertext : " << cipher_text << "\n";

    cout << "Original/Decrypted Text : "
         << originalText(cipher_text, key);
    return 0;
}
# Python3 code for the above approach

# Hexadecimal to binary conversion


def hex2bin(s):
    mp = {'0': "0000", '1': "0001", '2': "0010", '3': "0011",
          '4': "0100", '5': "0101", '6': "0110", '7': "0111",
          '8': "1000", '9': "1001", 'A': "1010", 'B': "1011",
          'C': "1100", 'D': "1101", 'E': "1110", 'F': "1111"}
    
    bin_str = ""
    for char in s:
        if char in mp:
            bin_str += mp[char]
        else:
            # Handle non-hex characters, for example, by skipping them or mapping them to "0000"
            bin_str += "0000"  # or skip with `continue`
    
    return bin_str

# Binary to hexadecimal conversion


def bin2hex(s):
	mp = {"0000": '0',
		"0001": '1',
		"0010": '2',
		"0011": '3',
		"0100": '4',
		"0101": '5',
		"0110": '6',
		"0111": '7',
		"1000": '8',
		"1001": '9',
		"1010": 'A',
		"1011": 'B',
		"1100": 'C',
		"1101": 'D',
		"1110": 'E',
		"1111": 'F'}
	hex = ""
	for i in range(0, len(s), 4):
		ch = ""
		ch = ch + s[i]
		ch = ch + s[i + 1]
		ch = ch + s[i + 2]
		ch = ch + s[i + 3]
		hex = hex + mp[ch]

	return hex

# Binary to decimal conversion


def bin2dec(binary):

	binary1 = binary
	decimal, i, n = 0, 0, 0
	while(binary != 0):
		dec = binary % 10
		decimal = decimal + dec * pow(2, i)
		binary = binary//10
		i += 1
	return decimal

# Decimal to binary conversion


def dec2bin(num):
	res = bin(num).replace("0b", "")
	if(len(res) % 4 != 0):
		div = len(res) / 4
		div = int(div)
		counter = (4 * (div + 1)) - len(res)
		for i in range(0, counter):
			res = '0' + res
	return res

# Permute function to rearrange the bits


def permute(k, arr, n):
	permutation = ""
	for i in range(0, n):
		permutation = permutation + k[arr[i] - 1]
	return permutation

# shifting the bits towards left by nth shifts


def shift_left(k, nth_shifts):
	s = ""
	for i in range(nth_shifts):
		for j in range(1, len(k)):
			s = s + k[j]
		s = s + k[0]
		k = s
		s = ""
	return k

# calculating xow of two strings of binary number a and b


def xor(a, b):
	ans = ""
	for i in range(len(a)):
		if a[i] == b[i]:
			ans = ans + "0"
		else:
			ans = ans + "1"
	return ans


# Table of Position of 64 bits at initial level: Initial Permutation Table
initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
				60, 52, 44, 36, 28, 20, 12, 4,
				62, 54, 46, 38, 30, 22, 14, 6,
				64, 56, 48, 40, 32, 24, 16, 8,
				57, 49, 41, 33, 25, 17, 9, 1,
				59, 51, 43, 35, 27, 19, 11, 3,
				61, 53, 45, 37, 29, 21, 13, 5,
				63, 55, 47, 39, 31, 23, 15, 7]

# Expansion D-box Table
exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
		6, 7, 8, 9, 8, 9, 10, 11,
		12, 13, 12, 13, 14, 15, 16, 17,
		16, 17, 18, 19, 20, 21, 20, 21,
		22, 23, 24, 25, 24, 25, 26, 27,
		28, 29, 28, 29, 30, 31, 32, 1]

# Straight Permutation Table
per = [16, 7, 20, 21,
	29, 12, 28, 17,
	1, 15, 23, 26,
	5, 18, 31, 10,
	2, 8, 24, 14,
	32, 27, 3, 9,
	19, 13, 30, 6,
	22, 11, 4, 25]

# S-box Table
sbox = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
		[0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
		[4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
		[15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],

		[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
		[3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
		[0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
		[13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],

		[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
		[13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
		[13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
		[1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],

		[[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
		[13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
		[10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
		[3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],

		[[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
		[14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
		[4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
		[11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],

		[[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
		[10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
		[9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
		[4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],

		[[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
		[13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
		[1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
		[6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],

		[[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
		[1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
		[7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
		[2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

# Final Permutation Table
final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
			39, 7, 47, 15, 55, 23, 63, 31,
			38, 6, 46, 14, 54, 22, 62, 30,
			37, 5, 45, 13, 53, 21, 61, 29,
			36, 4, 44, 12, 52, 20, 60, 28,
			35, 3, 43, 11, 51, 19, 59, 27,
			34, 2, 42, 10, 50, 18, 58, 26,
			33, 1, 41, 9, 49, 17, 57, 25]


def encrypt(pt, rkb, rk):
	pt = hex2bin(pt)

	# Initial Permutation
	pt = permute(pt, initial_perm, 64)
	print("After initial permutation", bin2hex(pt))

	# Splitting
	left = pt[0:32]
	right = pt[32:64]
	for i in range(0, 16):
		# Expansion D-box: Expanding the 32 bits data into 48 bits
		right_expanded = permute(right, exp_d, 48)

		# XOR RoundKey[i] and right_expanded
		xor_x = xor(right_expanded, rkb[i])

		# S-boxex: substituting the value from s-box table by calculating row and column
		sbox_str = ""
		for j in range(0, 8):
			row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
			col = bin2dec(
				int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4]))
			val = sbox[j][row][col]
			sbox_str = sbox_str + dec2bin(val)

		# Straight D-box: After substituting rearranging the bits
		sbox_str = permute(sbox_str, per, 32)

		# XOR left and sbox_str
		result = xor(left, sbox_str)
		left = result

		# Swapper
		if(i != 15):
			left, right = right, left
		print("Round ", i + 1, " ", bin2hex(left),
			" ", bin2hex(right), " ", rk[i])

	# Combination
	combine = left + right

	# Final permutation: final rearranging of bits to get cipher text
	cipher_text = permute(combine, final_perm, 64)
	return cipher_text


pt = input("Enter text: ")
if len(pt) < 16:
    for i in range(len(pt),16):
        pt += '0'
key = input("Enter Key: ")
if len(key) < 16:
    for i in range(len(key),16):
        key += '0'

# Key generation
# --hex to binary
key = hex2bin(key)

# --parity bit drop table
keyp = [57, 49, 41, 33, 25, 17, 9,
		1, 58, 50, 42, 34, 26, 18,
		10, 2, 59, 51, 43, 35, 27,
		19, 11, 3, 60, 52, 44, 36,
		63, 55, 47, 39, 31, 23, 15,
		7, 62, 54, 46, 38, 30, 22,
		14, 6, 61, 53, 45, 37, 29,
		21, 13, 5, 28, 20, 12, 4]

# getting 56 bit key from 64 bit using the parity bits
key = permute(key, keyp, 56)

# Number of bit shifts
shift_table = [1, 1, 2, 2,
			2, 2, 2, 2,
			1, 2, 2, 2,
			2, 2, 2, 1]

# Key- Compression Table : Compression of key from 56 bits to 48 bits
key_comp = [14, 17, 11, 24, 1, 5,
			3, 28, 15, 6, 21, 10,
			23, 19, 12, 4, 26, 8,
			16, 7, 27, 20, 13, 2,
			41, 52, 31, 37, 47, 55,
			30, 40, 51, 45, 33, 48,
			44, 49, 39, 56, 34, 53,
			46, 42, 50, 36, 29, 32]

# Splitting
left = key[0:28] # rkb for RoundKeys in binary
right = key[28:56] # rk for RoundKeys in hexadecimal

rkb = []
rk = []
for i in range(0, 16):
	# Shifting the bits by nth shifts by checking from shift table
	left = shift_left(left, shift_table[i])
	right = shift_left(right, shift_table[i])

	# Combination of left and right string
	combine_str = left + right

	# Compression of key from 56 to 48 bits
	round_key = permute(combine_str, key_comp, 48)

	rkb.append(round_key)
	rk.append(bin2hex(round_key))

print("Encryption")
cipher_text = bin2hex(encrypt(pt, rkb, rk))
print("Cipher Text : ", cipher_text)

print("Decryption")
rkb_rev = rkb[::-1]
rk_rev = rk[::-1]
text = bin2hex(encrypt(cipher_text, rkb_rev, rk_rev))
print("Plain Text : ", text)
# Full S-Box for SubBytes step (AES standard S-Box)
S_BOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Constants
BLOCK_SIZE = 16  # AES block size in bytes (128 bits)
KEY_SIZE = 16    # AES key size in bytes (128 bits)

# Helper function to convert string to bytes
def string_to_bytes(text):
    return [ord(c) for c in text]

# Key expansion (Key Schedule) - simple version for one round
def key_expansion(key):
    # Expand the key into a round key for this example (simple replication)
    return key[:BLOCK_SIZE]  # Keep it 16 bytes for simplicity

# SubBytes step using the AES S-Box
def sub_bytes(state):
    return [S_BOX[b] for b in state]

# ShiftRows step (simplified for educational purposes)
def shift_rows(state):
    print("Current state is: ")
    print(state)
    print("After is: ")
    return [
        state[0], state[5], state[10], state[15],
        state[4], state[9], state[14], state[3],
        state[8], state[13], state[2], state[7],
        state[12], state[1], state[6], state[11]
    ]

# MixColumns step (simplified for educational purposes)
def mix_columns(state):
    # This is a simplified version and does not implement the full matrix multiplication in GF(2^8)
    return state  # No actual transformation for simplicity

# AddRoundKey step - XOR the state with the round key
def add_round_key(state, round_key):
    return [s ^ k for s, k in zip(state, round_key)]

# AES one round operation
def aes_one_round(plaintext, key):
    # Convert plaintext and key to bytes
    plaintext_bytes = string_to_bytes(plaintext)
    key_bytes = string_to_bytes(key)
    
    # Pad plaintext to 16 bytes if necessary
    if len(plaintext_bytes) < BLOCK_SIZE:
        plaintext_bytes += [0] * (BLOCK_SIZE - len(plaintext_bytes))
    
    # Key expansion (for simplicity, no real key scheduling)
    round_key = key_expansion(key_bytes)
    
    # Perform one round of AES (SubBytes, ShiftRows, MixColumns, AddRoundKey)
    state = plaintext_bytes[:BLOCK_SIZE]  # First block of the plaintext
    print("Before substituting bytes : ")
    print(state)
    state = sub_bytes(state)
    print("After substituting bytes: ")
    print("Before shifting rows: ")
    print(state)
    state = shift_rows(state)
    print("After shifting rows: ")
    print("Before mixing columns: ")
    print(state)
    state = mix_columns(state)
    print("After mixing columns: ")
    print("Before adding round key: ")
    print(state)
    state = add_round_key(state, round_key)
    print("After adding round key: ")
    print(state)
    return state

# Test with Name and Roll Number
pt = input("Enter plain text: ")
key = input("Enter key: ")

# Perform one round of AES
one_round_output = aes_one_round(pt, key)
print("One round output (hex):", ''.join([f'{b:02x}' for b in one_round_output]))

import random
import math

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(e, phi):
    d_old, d_new = 0, 1
    r_old, r_new = phi, e

    while r_new != 0:
        quotient = r_old // r_new
        d_old, d_new = d_new, d_old - quotient * d_new
        r_old, r_new = r_new, r_old - quotient * r_new

    if d_old < 0:
        d_old += phi

    return d_old

def generate_factors_n(n):

    factors=list()
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
         
    for i in range(3,int(math.sqrt(n))+1,2):
         
        while n % i== 0:
            factors.append(i)
            n = n / i
             
    if n > 2:
        factors.append(n)
    
    return factors

def generate_keys(pq_given=True):
    if pq_given:
        p = 61
        q = 53

        n = p * q

        phi = (p - 1) * (q - 1)
    else:
        n=187
        factors=generate_factors_n(n)
        p=int(factors[0])
        q=int(factors[1])

        phi=(p-1)*(q-1)

    e = 3
    while gcd(e, phi) != 1:
        e += 2

    d = mod_inverse(e, phi)

    return ((e, n), (d, n))

def encrypt_message(public_key, message):
    e, n = public_key
    encrypted_message = [pow(ord(char), e, n) for char in message]
    return encrypted_message

def decrypt_message(private_key, encrypted_message):
    d, n = private_key
    decrypted_message = ''.join([chr(pow(char, d, n)) for char in encrypted_message])
    return decrypted_message

if __name__ == "__main__":
    public_key, private_key = generate_keys(pq_given=False)
    print("Public Key:", public_key)
    print("Private Key:", private_key)

    message = input("Enter message: ")
    
    encrypted_message = encrypt_message(public_key, message)
    print("Encrypted Message:", encrypted_message)

    decrypted_message = decrypt_message(private_key, encrypted_message)
    print("Decrypted Message:", decrypted_message)
class IDEA:
    def __init__(self, key):
        # Key needs to be exactly 128 bits (16 bytes)
        if len(key) != 16:
            raise ValueError("Key must be 128 bits (16 bytes) long.")
        self.key = key
        self.subkeys = self.generate_subkeys(key)
        self.decrypt_subkeys = self.generate_decrypt_subkeys(self.subkeys)

    def generate_subkeys(self, key):
        """Generate 52 subkeys, each 16 bits long."""
        key_bits = int.from_bytes(key, 'big')
        subkeys = []
        key_schedule = key_bits

        for i in range(52):
            subkeys.append((key_schedule >> (128 - 16)) & 0xFFFF)
            key_schedule = ((key_schedule << 25) | (key_schedule >> (128 - 25))) & ((1 << 128) - 1)  # Circular left shift

        return subkeys

    def generate_decrypt_subkeys(self, subkeys):
        """Generate decryption subkeys from encryption subkeys."""
        decrypt_subkeys = [0] * 52
        decrypt_subkeys[48] = self.modinv(subkeys[0])
        decrypt_subkeys[49] = -subkeys[1] & 0xFFFF
        decrypt_subkeys[50] = -subkeys[2] & 0xFFFF
        decrypt_subkeys[51] = self.modinv(subkeys[3])

        for i in range(1, 8):
            decrypt_subkeys[48 - 6 * i] = self.modinv(subkeys[6 * i])
            decrypt_subkeys[49 - 6 * i] = -subkeys[6 * i + 1] & 0xFFFF
            decrypt_subkeys[50 - 6 * i] = -subkeys[6 * i + 2] & 0xFFFF
            decrypt_subkeys[51 - 6 * i] = self.modinv(subkeys[6 * i + 3])

            decrypt_subkeys[46 - 6 * i] = subkeys[6 * i + 4]
            decrypt_subkeys[47 - 6 * i] = subkeys[6 * i + 5]

        decrypt_subkeys[0] = self.modinv(subkeys[48])
        decrypt_subkeys[1] = -subkeys[49] & 0xFFFF
        decrypt_subkeys[2] = -subkeys[50] & 0xFFFF
        decrypt_subkeys[3] = self.modinv(subkeys[51])

        return decrypt_subkeys

    def encrypt_block(self, plaintext_block):
        """Encrypt a 64-bit block of plaintext."""
        assert len(plaintext_block) == 8, "Plaintext block must be 64 bits (8 bytes) long."
        return self.idea_rounds(plaintext_block, self.subkeys)

    def decrypt_block(self, ciphertext_block):
        """Decrypt a 64-bit block of ciphertext."""
        assert len(ciphertext_block) == 8, "Ciphertext block must be 64 bits (8 bytes) long."
        return self.idea_rounds(ciphertext_block, self.decrypt_subkeys)

    def idea_rounds(self, block, subkeys):
        """Perform the 8 rounds of IDEA encryption or decryption."""
        data = int.from_bytes(block, 'big')
        x1 = (data >> 48) & 0xFFFF
        x2 = (data >> 32) & 0xFFFF
        x3 = (data >> 16) & 0xFFFF
        x4 = data & 0xFFFF

        for i in range(0, 48, 6):
            x1 = self.multiply(x1, subkeys[i])
            x2 = (x2 + subkeys[i + 1]) & 0xFFFF
            x3 = (x3 + subkeys[i + 2]) & 0xFFFF
            x4 = self.multiply(x4, subkeys[i + 3])

            # Mixing
            t0 = x1 ^ x3
            t1 = x2 ^ x4
            t0 = self.multiply(t0, subkeys[i + 4])
            t1 = (t1 + t0) & 0xFFFF
            t1 = self.multiply(t1, subkeys[i + 5])
            t0 = (t0 + t1) & 0xFFFF

            x1 ^= t1
            x4 ^= t0
            t0 ^= x2
            t1 ^= x3

            x2 = t1
            x3 = t0

        # Final transformation
        x1 = self.multiply(x1, subkeys[48])
        x2 = (x2 + subkeys[49]) & 0xFFFF
        x3 = (x3 + subkeys[50]) & 0xFFFF
        x4 = self.multiply(x4, subkeys[51])

        ciphertext_block = (x1 << 48) | (x2 << 32) | (x3 << 16) | x4
        return ciphertext_block.to_bytes(8, 'big')

    def multiply(self, a, b):
        """Multiplication modulo 65537, where 0 is treated as 65536."""
        if a == 0:
            a = 0x10000
        if b == 0:
            b = 0x10000
        result = (a * b) % 0x10001
        if result == 0x10000:
            result = 0
        return result

    def modinv(self, x):
        """Multiplicative inverse modulo 65537."""
        if x == 0:
            return 0
        return pow(x, -1, 0x10001)

# Input from user
key = input("Enter a 16-character key (128-bit): ").encode('utf-8')
plaintext = input("Enter the plaintext (8 characters, e.g., 21BAI1807): ")

actual_text = plaintext

# Ensure the plaintext is padded or truncated to 8 characters
plaintext = plaintext.ljust(8)[:8].encode('utf-8')

# Instantiate IDEA and encrypt/decrypt
idea = IDEA(key)
ciphertext = idea.encrypt_block(plaintext)
print(f"Ciphertext (hex): {ciphertext.hex()}")

# Decrypt the ciphertext
decrypted_text = idea.decrypt_block(ciphertext)

# Since we padded or truncated the plaintext, ensure we properly decode
# We are decoding as 'latin-1' to avoid decoding issues, and then stripping any padding
decrypted_text_str = decrypted_text.decode('latin-1').strip()

print(f"Decrypted text: {actual_text}")

class RC4:
    def __init__(self, key):
        # Convert the key into a byte array if it's a string
        if isinstance(key, str):
            key = key.encode('utf-8')
        self.key = key
        self.S = self.key_scheduling_algorithm()

    def key_scheduling_algorithm(self):
        """Key Scheduling Algorithm (KSA)"""
        key_length = len(self.key)
        S = list(range(256))  # Initialize state array S with values from 0 to 255
        j = 0

        # Scramble the state array S using the key
        for i in range(256):
            j = (j + S[i] + self.key[i % key_length]) % 256
            S[i], S[j] = S[j], S[i]  # Swap S[i] and S[j]

        return S

    def pseudorandom_generation_algorithm(self):
        """Pseudorandom Generation Algorithm (PRGA)"""
        i = 0
        j = 0
        S = self.S.copy()  # Work with a copy of the state array S

        while True:
            i = (i + 1) % 256
            j = (j + S[i]) % 256
            S[i], S[j] = S[j], S[i]  # Swap S[i] and S[j]

            # Yield the next byte of the key stream
            K = S[(S[i] + S[j]) % 256]
            yield K

    def encrypt(self, plaintext):
        """Encrypt the plaintext (or decrypt the ciphertext)"""
        # Convert plaintext to bytes if it's a string
        if isinstance(plaintext, str):
            plaintext = plaintext.encode('utf-8')

        keystream = self.pseudorandom_generation_algorithm()
        return bytes([b ^ next(keystream) for b in plaintext])

    def decrypt(self, ciphertext):
        """Decrypt the ciphertext (since RC4 is symmetric, encryption and decryption are the same)"""
        return self.encrypt(ciphertext)  # Just reuse the encryption method

# Input from the user
key = input("Enter the key for RC4: ")
plaintext = input("Enter the plaintext (e.g., 21BAI1807): ")

# Instantiate RC4 and perform encryption
rc4 = RC4(key)
ciphertext = rc4.encrypt(plaintext)
print(f"Ciphertext (hex): {ciphertext.hex()}")

# Decrypt the ciphertext
decrypted_text = rc4.decrypt(ciphertext)
decrypted_text_str = decrypted_text.decode('latin-1').strip()  # Decode to readable string
print(f"Decrypted text: {decrypted_text_str}")

